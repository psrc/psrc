= Radiant Search Engine

  The Search behavior adds search capabilities to a Radiant site. The search
  engine builds an index that is updated each time you clear the cache.


== Query Constructs

=== Simple Query
  
    A simple search consists of a single word:
  
    Example:

      house
      tree

  A basic query is what the other queries are built upon.

=== Boolean

    You may specify which terms are required or optional for your results.

    Example:

      house OR tree
      house NOT tree

=== Wild Cards

    A wild query is a query using the pattern matching characters * and ?.

    Example:

      hous*
      house? OR tree

=== Fuzzy Query

    If you are not sure how to spell the search term you may use fuzzy queries.

    Example:

      huose~

=== Phrases
    
    A phrase query is a string of terms surrounded by double quotes.

    Example:

      "big house"

    The example matches "big house". Alternatively we could set the "slop"
    for the phrase which allows a certain variation in the match of the phrase.
    The slop for a phrase is an integer indicating how many positions you are
    allowed to move the terms to get a match.
    
    Example:

      "big house"~2

    This would match "big house", "big red house", "big red brick house" and even "house big".

=== Field Selection

    You may query only specific page parts by using the <field>[|<field>|...]: syntax.
    
    Example:
    
      title: sear* term
      title|body: NOT search term


== Setup

=== Configuration

    You have the option of configuring the behavior via a page part labeled "config".
    The configuration describes which page parts will be searched by default. If you
    choose to let the Search behavior figure out the best configuration it will search
    through all default.parts as specified in the config database table.

    Example:

      fields: [title, body]

=== Enable Search Behavior

    Using the "Search" behavior it is possible to provide standard form-based search
    as well as "live" search functionality. In order to enable "live" search you must
    create an additional page part called "update" that renders the search result.
    Assume a page with slug "search" as a child of the root page. The "body" page part
    of this page may look like:

    <r:search:form />
    <hr />
    <r:search:empty>
      No match.
    </r:search:empty>
    <r:search:results>
      Results:
      <ul>
        <r:search:results:each>
          <li>
            <r:link/> by <r:author/>
          </li>
        </r:search:results:each>
      </ul>
    </r:search:results>
    
    To extend this example to allow a "live" search from the header
    snippet that is included into every page, (Typo style live search),
    you need to create a page part called "update" which is only rendered
    when search results are returned from a "live" search request.
    Additionally, there is a new tag <r:search:update /> that lets you
    position the "update" element (it will contain the search results).

    <ul>
      <r:search:results:each>
        <li><r:link/></li>
      </r:search:results:each>
    </ul>

    The "form" page part is included into the header snippet, described
    below:

    <r:search:form update="search-results" prototype="true" 
                   label="Live search:" />
    <r:search:update />

    Since, the header snippet itself is not always rendered in the
    context of a "Search" behavior the <r:search:form> tag is not always
    available. This prevents us from adding the form directly into the
    header snippet and requires the creation of the "form" page part for
    the search page. This page part can be easily included into the
    header snippet with the following lines:
    
    <r:find url="/search">
      <r:content part="body"/>
    </r:find>
 

== Installation

  1. Install Ferret.

     gem install ferret

  2. Install Acts as Ferret Plugin.

     script/plugin install svn://projects.jkraemer.net/acts_as_ferret/tags/plugin/stable/acts_as_ferret

  3. Copy the Search behavior into Radiant's vendor/plugins directory.
     The name of the search plugin directory must be search_behavior.

  4. Edit the file config/environment.rb so it contains these following lines.
  
     # Radiant application must be in production mode otherwise the Engines will not load correctly.
     ENV['RAILS_ENV'] ||= 'production'


== FAQ

  Q: Why do I get an "uninitialized constant DEFAULT_PARTS" NameError?
  A: You are not running the application in production mode. Try:
       script/server -e production
  
  Q: After installing the search plugin, my server won't start. The server doesn't log an error message either?
  A: Install all the dependencies (i.e. acts_as_ferret).

== Credits

  Oliver Balzer introduced the initial idea and prototype on his website http://nobits.org.

== License
Copyright (c) 2006 Alex Horn <alx.development@gmail.com>

The MIT License

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

